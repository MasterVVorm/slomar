type Query {
  tom(id: ID!): Tom
  toms: [Tom]
  word(name: String!): Word
  words(skip: Int = 0, take: Int = 10, tom: Int): [Word]

  search(word: String!): [Word]
}

type Mutation {
  login(email: String!, password: String!): String
}

type Mutation {
  addTom(name: String!): Tom!
  deleteTom(tom: Int!): Tom!
}

type Mutation {
  addWord(tom: Int!, name: String!, meanings: [MeaningInput!]!): Word!
  deleteWord(word: Int!): Word!
}

type Mutation {
  addMeaning(word: Int!, text: String, example: String): Meaning!
}

input MeaningInput {
  text: String!
  example: String!
}

type Tom {
  id: ID!
  name: String!
  created: String!
  updated: String!
  words_amount: Int
}

type Word {
  id: ID!
  name: String!
  status: String!
  tom: Tom
  meanings: [Meaning!]
  created: String!
  updated: String!
}

type Meaning {
  id: ID!
  text: String!
  example: String!
  word: Word!
}
